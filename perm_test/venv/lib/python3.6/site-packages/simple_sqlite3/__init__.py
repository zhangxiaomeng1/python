"""
simple-sqlite3.py
~~~~~~~~~~~~~~

pass

:copyright: (c) 2017 by ZhangYunHao.
:license: Apache2, see LICENSE for more details.
"""

import sqlite3


class SQLite3:
    def __init__(self, db_name, ignore_error=True, print_error=False):
        self.db_name = db_name
        self.ignore_error = ignore_error
        self.print_error = print_error

    def sql_create_table(self, table_name, var_dict):
        """
            table_name:database table name,str
            var_dict:variable name ,dict
        """

        # Create SQL text.
        sql_text_head = 'CREATE TABLE %s \n(' % table_name
        sql_text_end = '\n);'
        sql_text = sql_text_head
        temp = ''
        for key in var_dict.keys():
            temp = key
        for k, v in var_dict.items():
            sql_text_body = '\n%s %s,' % (k, v)
            if k == temp:
                sql_text_body = sql_text_body[0:len(sql_text_body) - 1]
            sql_text = sql_text + sql_text_body
        sql_text = sql_text + sql_text_end

        # Try to create table.
        with sqlite3.connect(self.db_name) as connect:
            try:
                connect.execute(sql_text)
            except sqlite3.Error as e:
                if not self.ignore_error:
                    raise e
                if self.print_error:
                    print('sql_create_error:', e)
                return False
        return True

    def sql_insert(self, table_name, var_key, var_values):
        """
            table_name:database table name,str
            var_key:database key name,list
            var_values:database values,list
        """

        # Get variable SQL text.
        var_key_str = str(tuple(var_key)).replace("'", '')
        var_values_str = str(tuple(var_values))

        # Delete ',' if just one item.
        if len(var_key) == 1:
            var_key_str = var_key_str[:-2] + var_key_str[-1]
        if len(var_values) == 1:
            var_values_str = var_values_str[:-2] + var_values_str[-1]

        # Create SQL text.
        sql_text = '''INSERT INTO %s %s VALUES %s''' % (table_name, var_key_str, var_values_str)

        # Execute SQL text.
        with sqlite3.connect(self.db_name) as connect:
            try:
                connect.execute(sql_text)
            except sqlite3.Error as e:
                if not self.ignore_error:
                    raise e
                if self.print_error:
                    print('sql_insert_error:', e)
                return False
        return True

    def sql_select(self, table_name, var_key, where=''):
        """
            table_name:database table name,str
            var_key:database key name,list
            :return a list ,contains all tuples in database,list.
        """

        # Get variable SQL text.
        temp = []
        for i in var_key:
            temp.append(i)
            if i != var_key[-1]:
                temp.append(',')

        var_text = ''.join(temp)

        # Create SQL text.
        sql_text = 'SELECT %s from %s' % (var_text, table_name)
        if where:
            sql_text = sql_text + ' where ' + where

        # Execute SQL text.
        result = []
        with sqlite3.connect(self.db_name) as connect:
            try:
                cursor = connect.execute(sql_text)
            except sqlite3.Error as e:
                if not self.ignore_error:
                    raise e
                if self.print_error:
                    print('sql_select_error:', e)
                return False

            for i in cursor:
                result.append(i)

        return result

    def sql_update(self, table_name, var_key, var_values, where=''):

        # Check input.
        if len(var_key) != len(var_values):
            print('sql_update_error: length of key&value not the same.')
            if not self.ignore_error:
                raise Exception('sql_update_error: length of key&value not the same.')
            return False

        var_values = list(var_values)

        # Create SQL text list.
        sql_text_list = []
        for i in range(len(var_key)):
            # Add 'str' for values.
            if type(var_values[i]) is str:
                var_values[i] = self._escape_str(var_values[i])

            sql_text = 'UPDATE %s set %s = %s' % (table_name, var_key[i], var_values[i])
            if where:
                sql_text = sql_text + ' where ' + where
            sql_text_list.append(sql_text)

        # Execute SQL text list.
        execute_status = True
        with sqlite3.connect(self.db_name) as connect:
            for i in sql_text_list:
                try:
                    connect.execute(i)
                except sqlite3.Error as e:
                    if not self.ignore_error:
                        raise e
                    if self.print_error:
                        print('sql_update_error:', e)
                    execute_status = False

        return execute_status

    def sql_delete(self, table_name, where=''):
        # Create SQL text.
        sql_text = 'DELETE from %s' % table_name
        if where:
            sql_text = sql_text + ' where ' + where

        # Execute SQL text.
        with sqlite3.connect(self.db_name) as connect:
            try:
                connect.execute(sql_text)
            except sqlite3.Error as e:
                if not self.ignore_error:
                    raise e
                if self.print_error:
                    print('sql_delete_error:', e)
                return False
        return True

    def _escape_str(self, input_str):
        if type(input_str) is str:
            # Escape "'" in sql text and add "'".
            result = input_str.replace("'", "''")
            result = "'" + result + "'"
            return result
        else:
            if self.print_error:
                print('sql_escape_error!')
            if not self.ignore_error:
                raise Exception('sql_escape_error!')
            return input_str


if __name__ == '__main__':
    """
        1.Test sql_create_table & sql_insert .
    """
    sql = SQLite3('test.db', ignore_error=True, print_error=True)
    sql.sql_create_table('test_1', {'id': 'INT PRIMARY KEY', 'txt': 'TEXT'})

    # Insert one item.
    sql.sql_insert('test_1', ('id',), ('1',))
    print('1.insert one item. query:', sql.sql_select('test_1', ('id', 'txt')))

    # Insert two.
    sql.sql_insert('test_1', ('id', 'txt'), (2, 'hello,world!'))
    print('1.insert two.      query:', sql.sql_select('test_1', ('id', 'txt')))

    """
        2.Test sql_update.
    """
    sql.sql_update('test_1', ('id', 'txt',), ('3', 'okay!',), where='id =1')
    print('2.update id = 1(3).query:', sql.sql_select('test_1', ('id', 'txt')))

    """
        3.Test sql_delete.
    """
    sql.sql_delete('test_1', where='id=2')
    print('3.delete id = 2.   query:', sql.sql_select('test_1', ('id', 'txt')))
